# -*- coding: utf-8 -*-
"""modeling_boost.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16UqP5rMigOv-NSaMwf5iiPOaBUEsgbxV

# Import
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
from sklearn.model_selection import train_test_split, StratifiedKFold, cross_validate
from sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, f1_score, roc_auc_score
from google.colab import files
from scipy.stats import uniform, randint

train = pd.read_csv("/content/drive/MyDrive/패턴인식/final_train.csv")
test = pd.read_csv("/content/drive/MyDrive/패턴인식/final_test.csv")

"""#validation set 분리"""

X = train.drop(columns=["y"])
y = train["y"]

X_train, X_val, y_train, y_val = train_test_split(
    X, y, test_size=0.3, stratify=y, random_state=42)

#cross validation 세팅
cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)

"""#model"""

models = {
    "AdaBoost": AdaBoostClassifier(n_estimators=100, random_state=42),
    "GradientBoost": GradientBoostingClassifier(n_estimators=100, random_state=42),
    "XGBoost": XGBClassifier(use_label_encoder=False, eval_metric="logloss", random_state=42)
    }

"""# Evaluating"""

results = {}
cv_results = {} #cross validation

scoring = ["accuracy", "f1", "roc_auc"]

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_val)
    y_proba = model.predict_proba(X_val)[:, 1]

    results[name] = {
        "Accuracy": accuracy_score(y_val, y_pred),
        "F1-score": f1_score(y_val, y_pred),
        "AUC": roc_auc_score(y_val, y_proba)
        }
    #cross validation
    scores = cross_validate(
        model,
        X, y,
        cv=cv,
        scoring=scoring,
        return_train_score=False
    )
    cv_results[name] = {
        metric: scores[f"test_{metric}"].mean()
        for metric in scoring
    }

results_df = pd.DataFrame(results).T
results_df["MeanScore"] = results_df[["Accuracy", "F1-score", "AUC"]].mean(axis=1)

print("Model Performance on Validation Set:")
print(results_df)
print("\n")

results_cv = pd.DataFrame(cv_results).T
results_cv["MeanScore"] = results_cv[["accuracy", "f1", "roc_auc"]].mean(axis=1)
print("Cross-Validation Results (5-fold):")
print(results_cv)

best_model_name = results_cv["MeanScore"].idxmax()
best_model = models[best_model_name]

print(f"\nBest model: {best_model_name}")