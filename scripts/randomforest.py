# -*- coding: utf-8 -*-
"""RandomForest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rmxBH2_hkLbwwHPJpUKqWesCrtJdzttx
"""

import pandas as pd

df = pd.read_csv("final_train.csv")
X_train = df.drop("y", axis=1)
y_train = df["y"]

from sklearn.model_selection import RandomizedSearchCV
from scipy.stats import randint
from sklearn.ensemble import RandomForestClassifier

rf_model = RandomForestClassifier(random_state=42, n_jobs=-1)

param_dist = {
    "n_estimators": randint(50, 200),
    "max_depth": randint(3, 20),
    "min_samples_split": randint(2, 10),
    "min_samples_leaf": randint(1, 10)
}

random_search = RandomizedSearchCV(
    rf_model,
    param_distributions=param_dist,
    n_iter=20,
    scoring='accuracy',
    cv=3,
    random_state=42,
    n_jobs=-1
)
random_search.fit(X_train, y_train)
print("Best parameters:", random_search.best_params_)

from sklearn.model_selection import GridSearchCV

rf_model = RandomForestClassifier(random_state=42, n_jobs=-1)

# RandomizedSearchCV 결과 기반 주변 값으로 파라미터 설정
param_grid = {
    'n_estimators': [190, 195, 200],
    'max_depth': [11, 12, 13],
    'min_samples_split': [6, 7, 8],
    'min_samples_leaf': [3]
}

# GridSearchCV 정의
grid_search = GridSearchCV(
    estimator=rf_model,
    param_grid=param_grid,
    cv=3,
    scoring='accuracy',
    n_jobs=-1,
    verbose=2
)

# 학습
grid_search.fit(X_train, y_train)

# 결과 출력
print("Best Parameters:", grid_search.best_params_)
print("Best Accuracy:", grid_search.best_score_)

final_rf = RandomForestClassifier(max_depth=12, min_samples_leaf=3, min_samples_split=7, n_estimators=195, random_state=42)